# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

GET     /                        controllers.HomeController.index

GET     /settings/about          controllers.SettingsController.about
GET     /settings/profile        controllers.SettingsController.userProfile
POST    /settings/profile        controllers.SettingsController.userProfilePost
GET     /settings/users          controllers.SettingsController.listUsers
GET     /settings/user/add       controllers.SettingsController.addUser
POST    /settings/user/add       controllers.SettingsController.addUserPost

# Javascript Routes
GET     /js/autocomplete-person           controllers.HomeController.autocompletePersonJs
GET     /js/autocomplete-machine/:userId  controllers.HomeController.autocompleteMachineJs(userId: Int)
GET     /js/toggle-token-active           controllers.HomeController.toggleTokenActive
GET     /js/toggle-person-active          controllers.HomeController.togglePersonActive
GET     /js/toggle-machine-active         controllers.HomeController.toggleMachineActive
GET     /js/filter-log-entry              controllers.HomeController.filterLogEntry


GET     /machines                   controllers.MachineController.listMachines
GET     /machine/modify             controllers.MachineController.modifyMachine(id: Int)
POST    /machine/modify             controllers.MachineController.modifyMachinePost
GET     /machine/add                controllers.MachineController.addMachine
POST    /machine/add                controllers.MachineController.addMachinePost
GET     /machine/configure          controllers.MachineController.configureMachine(id: Int)
POST    /machine/configure          controllers.MachineController.configureMachinePost
POST    /machine/toggle-active      controllers.MachineController.toggleMachineActivePost
GET     /machine/delete/:id         controllers.MachineController.deleteMachine(id: Int)
GET     /machine/find               controllers.MachineController.findMachine(term: Option[String])
GET     /machine/find-qualificable  controllers.MachineController.findQualificableMachine(user: Int, term: Option[String])
GET     /machine/qualified          controllers.MachineController.listQualifiedPersons(id: Int)


GET     /persons                      controllers.PersonController.listPersons
GET     /person/add                   controllers.PersonController.addPerson
POST    /person/add                   controllers.PersonController.addPersonPost
GET     /person/modify/:id            controllers.PersonController.modifyPerson(id: Int)
POST    /person/modify                controllers.PersonController.modifyPersonPost
POST    /person/toggle-active         controllers.PersonController.togglePersonActivePost
GET     /person/find                  controllers.PersonController.findPerson(term: Option[String])
GET     /person/delete                controllers.PersonController.deletePerson(id: Int, returnTo: String)
GET     /person/add-qualification/:id controllers.PersonController.addQualification(id: Int)
POST    /person/add-qualification     controllers.PersonController.addQualificationPost
GET     /person/revoke-qualification/:personId/:machineId  controllers.PersonController.revokeQualification(personId: Int, machineId: Int)

GET     /tokens/list             controllers.TokenController.listTokens
GET     /tokens/unknown          controllers.TokenController.listUnknownTokens
GET     /tokens/unknown/clear    controllers.TokenController.clearUnknownTokenList
GET     /tokens/assigned         controllers.TokenController.listAssignments
GET     /tokens/prepared         controllers.TokenController.showPreparedToken
GET     /tokens/copy/:id         controllers.TokenController.copyPreparedToken(id: Int)
POST    /tokens/copy/:id         controllers.TokenController.copyPreparedTokenPost(id: Int)
POST    /tokens/toggle-active    controllers.TokenController.toggleTokenActivePost
GET     /tokens/modify           controllers.TokenController.modifyToken(id: Int)
POST    /tokens/modify           controllers.TokenController.modifyTokenPost(id: Int)
GET     /tokens/delete           controllers.TokenController.deleteToken(id: Int, returnTo: String)
GET     /tokens/add/:token       controllers.TokenController.addToken(token: String)
POST    /tokens/add              controllers.TokenController.addTokenPost

GET     /login                   controllers.LoginController.login
POST    /login                   controllers.LoginController.loginPost
GET     /logout                  controllers.LoginController.logout

GET     /dev/setup               controllers.Development.setup
GET     /dev/dummy               controllers.Development.createDummyData
GET     /dev/log                 controllers.Development.showLog

GET     /access_log              controllers.LogEntryController.listLogEntries(offset: Option[Int], machineId: Option[Int])

GET     /api/machine/config      controllers.ApiController.getMachineConfig(machine: String)
GET     /api/machine/check       controllers.ApiController.checkMachineAccess(machine: String, tokenUid: String)
GET     /api/status              controllers.ApiController.machineStatus(machine: String)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
->      /webjars                    webjars.Routes
